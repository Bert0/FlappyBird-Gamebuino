#include <SPI.h>
#include <Gamebuino.h>
Gamebuino gb;
extern const byte font5x7[];
extern const byte font3x5[];
#define NOTE_E2  220
#define NOTE_A4  200
#define NOTE_F1  600


const byte PROGMEM sprite1[] =
{ 
    18,12,
    B00000011,B11111000,B00000000,
    B00001100,B00100100,B00000000,
    B00010000,B01000010,B00000000,
    B01111000,B01000101,B00000000,
    B10000100,B01000101,B00000000,
    B10000010,B00100001,B00000000,
    B10000010,B00011111,B10000000,
    B01000010,B00100000,B01000000,
    B00111100,B01011111,B10000000,
    B00100000,B00100000,B10000000,
    B00011000,B00011111,B00000000,
    B00000111,B11100000,B00000000,
    
};


const byte PROGMEM sprite2[] =
{ 
    18,12,
    B00000011,B11111000,B00000000,
    B00001100,B00100100,B00000000,
    B00010000,B01000010,B00000000,
    B00100000,B01000101,B00000000,
    B01000000,B01000101,B00000000,
    B01111100,B00100001,B00000000,
    B10000010,B00011111,B10000000,
    B10000010,B00100000,B01000000,
    B01111100,B01011111,B10000000,
    B00100000,B00100000,B10000000,
    B00011000,B00011111,B00000000,
    B00000111,B11100000,B00000000,
    
};


const byte PROGMEM sprite3[] =
{ 
    18,12,
    B00000011,B11111000,B00000000,
    B00001100,B00100100,B00000000,
    B00010000,B01000010,B00000000,
    B00100000,B01000101,B00000000,
    B01000000,B01000101,B00000000,
    B01000000,B00100001,B00000000,
    B01111100,B00011111,B10000000,
    B10000010,B00100000,B01000000,
    B10000100,B01011111,B10000000,
    B10001000,B00100000,B10000000,
    B01111000,B00011111,B00000000,
    B00000111,B11100000,B00000000,
    
};
int pastTime;
int altura = 10;
int aumentoAltura = 0;
int timeChange;
int pipe1X = 80;
int pipe1Y = random(18,31);
int pipe2X = 130;
int pipe2Y = random(18,31);
int espacioPipes = 12;
int score = 0;
int constanteAumentoAltura = 2;
float constanteAumentoDesplazamiento = 1.5;
int test=1;
int bestscore = 0;
boolean validationFinalTone = true;

void dibujaPipe(int pipeX, int pipeY){
     gb.display.drawRect(pipeX, -1, -18, pipeY-espacioPipes-3);
     gb.display.drawRect(pipeX+2, pipeY-espacioPipes-5, -22, 5);
     gb.display.drawRect(pipeX, pipeY+espacioPipes+4, -18, 49-(pipeY+espacioPipes));
     gb.display.drawRect(pipeX+2, pipeY+espacioPipes, -22, 5); 
}

void displayScore(int validacion, int score){
  if (validacion){
    
    gb.display.setColor(BLACK);
    gb.display.setFont(font5x7);
    gb.display.cursorX = 70;
    gb.display.cursorY = 2;
    gb.display.print(score);
  }
}

void bestScore(){
   if (score>bestscore){
      bestscore=score;
   }
}


void dibujaBird(){
      gb.display.setColor(BLACK);
      if (aumentoAltura==0){
       gb.display.drawBitmap(2,altura,sprite1);
     }
     if (aumentoAltura>3){
       gb.display.drawBitmap(2,altura,sprite2);
     }
     if (aumentoAltura<4 && aumentoAltura>0){
       gb.display.drawBitmap(2,altura,sprite3);
     }
}

void finalTone(){
    if(validationFinalTone){
    tone(3, NOTE_E2, 300);
    validationFinalTone = false;
    } 

}


void endGame(int validation){
   
   if(validation){
     finalTone();
     constanteAumentoDesplazamiento =  0;
     constanteAumentoAltura =  0;
     aumentoAltura =  0;
     bestScore();
   }
   else{
    altura = 10;
    aumentoAltura = 0;
    pipe1X = 80;
    pipe1Y = random(18,31);
    pipe2X = 130;
    pipe2Y = random(18,31);
    espacioPipes = 12;
    score = 0;
    constanteAumentoAltura = 2;
    constanteAumentoDesplazamiento = 1.5;
    validationFinalTone = true;
   }

}
void pantallaFinal(){
      
           endGame(true);
           finalTone();
           //gb.display.setColor(BLACK); 
           gb.display.fillRoundRect(15, 10, 54, 28, 5);
           gb.display.setColor(WHITE); 
           gb.display.setFont(font5x7);
           gb.display.cursorX = 19;
           gb.display.cursorY = 15;
           gb.display.print("SCORE: ");
           gb.display.cursorX = 53;
           gb.display.cursorY = 15;
           gb.display.print(score);
           gb.display.cursorX = 19;
           gb.display.cursorY = 26;
           gb.display.print("BEST: ");
           gb.display.cursorX = 53;
           gb.display.cursorY = 26;
           gb.display.print(bestscore);
           gb.display.setColor(BLACK);
           gb.display.fillRect(13, 39, 57, 7);
           gb.display.setColor(WHITE); 
           gb.display.setFont(font3x5);
           gb.display.cursorX = 14;
           gb.display.cursorY = 40;
           gb.display.print("Press button B");
}

void crashTest(){
     if (pipe1X-20<19){
       if (altura>pipe1Y-13){
         
         }
        else{
          //test=0;
          pantallaFinal();
        }
      } 
      
     if (pipe2X-20<19){
       if (altura>pipe2Y-13){
        
         }
        else{
        //  test=0;
          pantallaFinal();
        }
      } 
      
      if (pipe1X-20<19){
       if (altura+12<pipe1Y+13){
        // test=1;
         }
        else{
         // test=0;
          pantallaFinal();
        }
      } 
      
     if (pipe2X-20<19){
       if (altura+12<pipe2Y+13){
        // test=1; 
         }
        else{
          //test=0;
          pantallaFinal();
        }
      } 
}


void setup() {
  Serial.begin(9600);
  gb.begin();
  gb.titleScreen(F("FlappyBert0"));
  gb.display.setFont(font5x7);
  //tone(3, NOTE_A4, 100);
}


void loop() {
  
  if(gb.update()){
    
      
      if(gb.buttons.pressed(BTN_B)){
        if (constanteAumentoAltura == 0){
          endGame(false);
          tone(3, NOTE_F1, 100);
        }
      }
    
    
      if(gb.buttons.pressed(BTN_A)){
        if (constanteAumentoAltura != 0){
          aumentoAltura=5;}
      }
      
      
      //Serial.println((millis())%25);
      
      timeChange = (millis()/1)%2==0;
      
      
      if(timeChange !=(millis()/1)%2) {
        
        
        timeChange =(millis()/1)%2;
        if (aumentoAltura>0){
          if (altura>0){
            altura = altura - constanteAumentoAltura;
          }
          aumentoAltura = aumentoAltura - 1;
        }
        else{
        
          if (altura<36){
            altura = altura + constanteAumentoAltura;
          }
        }
      
        if (pipe1X > 1){  
        pipe1X = pipe1X - constanteAumentoDesplazamiento;
        }
        if (pipe1X <1){  
        pipe1X = 102;
        pipe1Y = random(18,31);
        }
        
        if (pipe2X > 1){  
        pipe2X = pipe2X - constanteAumentoDesplazamiento;
        }
        if (pipe2X <1){  
        pipe2X = 102;
        pipe2Y = random(18,31);
        }
      }
     
     
     dibujaBird();
     dibujaPipe(pipe1X, pipe1Y);
     dibujaPipe(pipe2X, pipe2Y);
     crashTest();
     
     
     if (altura>pipe1Y-13 && altura+12<pipe1Y+13 && pipe1X<4){
       score = score + 1 ;
       tone(3, NOTE_F1, 200);
       
     }
     if (altura>pipe2Y-13 && altura+12<pipe2Y+13 && pipe2X<4){
       score = score + 1 ;
       tone(3, NOTE_F1, 200);
     }
     
     
      displayScore(true, score);
     
    
  }
}
